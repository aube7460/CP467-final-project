Title
Abstract
This paper goes over an elementary implementation of a complete optical character recognition system, capable of recognizing handwritten digits from 0 to 9, and uppercase letters from A to Z. Prior to recognition, every image that is input into the system is thinned and scaled, with the option of processing multiple characters also available. Once scaled, each individual character is then put through the recognition system, which consists of the use of a statistical method where the ratio of black pixels to white pixels in certain zones of the image is calculated, and used to generate a feature vector to describe the input character. This feature vector is later compared to a large number of other feature vectors from test images in a database and the feature vector with the lowest Euclidean distance with the input image will then be used to recognize the image.
 
Introduction
An optical character recognition system, or OCR for short, is characterized by a conversion from images of handwritten or printed text into data that can be later used for processing by a computer system. OCR systems are typically used to process printed texts for applications such as digital storage, and electronic modifications. OCR systems can also be found in other applications, such as the translation of handwritten languages, as well as in text-to-speech implementations. 
Through the use of various functions, this optical character recognition system is able to recognize images of handwritten digits from 0 to 9, as well as uppercase letters from A to Z. After processing, the system will then output the digit or letter that it believes to most closely represent the image that was inputted. This process is explored more in depth in the following section.  
This paper will then explore the results of the proposed method, through the use of 75 test images per digits to test the systemâ€™s accuracy, which will then be used to explore the limitations of the statistical method for feature extraction that is used in this OCR system. 
Future considerations for improving the OCR system will then be explored in the penultimate section of this paper, where suggestions for future development are considered and discussed, and where areas of improvement within the current iteration of the system can be found.

METHOD:
complete optical character recognition system
The OCR system we have written involves many steps to get from the initial character input to the character recognition output. The system was written in the python programming language and we implement the pillow library to assit with image handling.  The character is imported into the system as a grayscale image, we convert the image to a black and white.  The image is converted to black and white because the thinning algorithm used requires the image to be each white or black, and our feature vector calculates the amount of black pixels to the amount of white pixels.  After the character has been imported to the program correctly and converted to a black and white image, we check to see if there are multiple characters in the image[-------------------will------------------].  The program will then scale the image to a predetermine size so that all characters are the same size and this also helps with the speed of the program.  The image is padded with zeros after it has been scaled so that the thinning algorithm preforms correctly.  The thinning algorithm that we use is the ZS algorithm which was developed by T.Y. Zhang and C.Y. Suen.  After the image is scaled and thinned, we divide the image into sixteen zones.  Each zone will become an element in our feature vector array.  Each element in the array is calculated by counting the amount of black pixels in the zone and dividing that number by the total amount of pixels in that zone.  Once a value for each zone is found, the feature vector is compared to the our database of test vectors.  for each character, 0 to 9 and A-Z in uppercase, we have four handwritten characters and one typed character. For the uppercase letters we used font Calibri and for the numbers we used font Arial.  we compare the characters feature vector to each vector in the database to determine which vector in the database has the closest euclidean distance to the characters vector.  The one with the shortest euclidean distance is determined to be a match and the value associated with that vector is output as the recognized character.  The user is shown the original image and the output character and is asked whether the system output the correct result. 